# This is a basic workflow to help you get started with Actions

name: Test Changes

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: 
            - '*'         # matches every branch that doesn't contain a '/'
            - '*/*'       # matches every branch containing a single '/'
            - '**'        # matches every branch
            - '!main'     # excludes main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0
            
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          

      
      - name: Check if forbidden files have been modified (e.g. tests)
        id: forbidden-changes
        uses: tj-actions/changed-files@v11.9
        with:
            files: |
                \.github
                tests
                
      - name: Fail if forbidden files have changed
        if: steps.forbidden-changes.outputs.any_changed == 'true'
        run: |
            echo "One or more forbiden files have changed."
            exit 1
      
      - name: Run the Maven verify phase
        run: |
          set +eo pipefail
          mvn -B test --file results/pom.xml
          cd results
          trxname=$(ls)
          trxfile=$(<$trxname)
          echo 'RESULTS<<EOF' >> $GITHUB_ENV
          echo "$trxfile" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Post Results
        uses: indiesdev/curl@v1
        with:
            url: ${{ secrets.RESULTSENDPOINT }}
            method: "POST"
            accept: 200,201,204
            headers: '{ "Content-Type": "text/plain", "Lang": "csharp", "Author": "${{ github.actor }}", "Repository": "${{ github.repository }}", "Branch": "${{ github.ref_name }}" }'
            body: "${{ env.RESULTS }}"
            timeout: 10000
            is_debug: true
